#Javier Hern√°ndez Cole
#Assignment 2

#First part

#makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse

makeCacheMatrix <- function(M = matrix()) {
  invM <- NULL
  set <- function(x) {
    M <<- x
    invM <<- NULL
  }
  get <- function() M
  setInverse <- function(inverse) inv <<- inverse
  getInverse <- function() invM
  list(set = set,
       get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}

Max<-matrix(c(3,7,3,4),nrow=2) 
Matr<-makeCacheMatrix(Max)
Matr

##################################################################################

#Second part

#cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.

cacheSolve <- function(M, ...) {
  inv <- M$getInverse()
  if (!is.null(inv)) {
    message("getting cached data")
    return(invM)
  }
  mat <- M$get()
  invM <- solve(mat, ...)
  M$setInverse(invM)
  invM
}
cacheSolve(Matr)
